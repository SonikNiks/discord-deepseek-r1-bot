import dotenv from "dotenv";
dotenv.config();
import {
  Client,
  Events,
  GatewayIntentBits,
  Message,
  OmitPartialGroupDMChannel,
  Partials,
  AttachmentBuilder,
} from "discord.js";

import generateResponse from "./lib/fetch/internal";
import cleanAIResponse from "./lib/utils/cleanResponse";
import generateAPIResponse from "./lib/fetch/external";
import sendPaginatedReply from "./lib/utils/sendPaginatedReply";

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.GuildMessageReactions,
    GatewayIntentBits.GuildMessageTyping,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.DirectMessages
  ],
  partials: [ Partials.Channel ] 
});

client.on(Events.ClientReady, (readyClient) => {
  console.log(`Logged in as ${readyClient.user.tag}!`);
});

client.on('messageCreate', message => {
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  if (message.author.bot) return;
  
  // –õ—é–±–æ–π DM –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –≥–∏–ª—å–¥–∏–∏
  if (message.channel.type === 'DM') {
    message.channel.send('–ü—Ä–∏–≤–µ—Ç! –Ø —Ç—É—Ç');
  }
  // ‚Ä¶ –≤–∞—à –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥
});

client.on(Events.MessageCreate, async (message) => {
  try {
    if (message.author.bot) return;

    await message.channel.sendTyping();

    if (process.env.ONLY_LOCAL === 'true') {
      return await localFetch(null, message);
    } else {
      console.log('Skipping only local...');
    }

    const result = await generateAPIResponse('deepseek-chat', message.content);
    if (!result) return;

    const fullReply = Array.isArray(result) ? result.join('\n') : result;

    // Split into chunks of 2000 characters and send each
    for (let i = 0; i < fullReply.length; i += 2000) {
      const chunk = fullReply.slice(i, i + 2000);
      const sent = await message.reply(cleanAIResponse(chunk));
    }

  } catch (err: any) {
    console.error(`Error using API: ${err.message}`);
    await localFetch(null, message);
  }
});

// Local fetch fallback
async function localFetch(
  _unused: null,
  message: OmitPartialGroupDMChannel<Message<boolean>>
) {
  if (message.author.bot) return;

  await message.channel.sendTyping();

  try {
    const result = await generateResponse(
      process.env.DEEPSEEK_MODEL || '',
      message.content
    );
    if (!result) return;

    const fullResponse = result.response || '';
    // Split into chunks
    for (let i = 0; i < fullResponse.length; i += 2000) {
      const chunk = fullResponse.slice(i, i + 2000);
      const sentMessage = await message.reply(cleanAIResponse(chunk));
      await sentMessage.react('üëçüèª');
      await sentMessage.react('üëéüèª');
    }
  } catch (err: any) {
    console.error(`Error in localFetch: ${err.message}`);
    await message.reply(
      `An error occurred while processing your request. Error: ${err.message}`
    );
  }
}


client.on(Events.MessageCreate, async (message) => {
  try {
    if (message.author.bot) return;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∏"
    await message.channel.sendTyping();

    // –¢–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
    if (process.env.ONLY_LOCAL === "true") {
      return await localFetch(null, message);
    } else {
      console.log("Skipping only local...");
    }

    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç API
    const result = await generateAPIResponse("deepseek-chat", message.content);
    if (!result) return;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –ª–∏–±–æ –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫, –ª–∏–±–æ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞
    const fullReply = Array.isArray(result) ? result.join("\n") : result;

    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –∫—É—Å–∫–∏ –ø–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤
    const chunks: string[] = [];
    for (let i = 0; i < fullReply.length; i += 2000) {
      chunks.push(fullReply.slice(i, i + 2000));
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –∫—É—Å–æ–∫ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    for (const chunk of chunks) {
      const sent = await message.reply(cleanAIResponse(chunk));
      await sent.react("üëçüèª");
      await sent.react("üëéüèª");
    }

  } catch (err: any) {
    console.error(`Error using API: ${err.message}`);
    await localFetch(null, message);
  }
});


body: JSON.stringify({
  model: process.env.DEEPSEEK_MODEL,
  messages: [
    { role: "system", content: "You are a helpful assistant." },
    { role: "user",   content: prompt }
  ]
})

client.on('messageCreate', async (message: Message) => {
  if (message.author.bot) return;

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º ¬´–±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç‚Ä¶¬ª, –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
  await message.channel.sendTyping();

  // –ì–æ—Ç–æ–≤–∏–º prompt –∏ messagesArray, –∫–∞–∫ —Ä–∞–Ω—å—à–µ
  const prompt = message.content;
  const messagesArray = [
    { role: 'system', content: 'You are a helpful assistant.' },
    { role: 'user',   content: prompt }
  ];

  try {
    const res = await fetch('https://api.deepseek.com/v1/chat/completions', { /* ‚Ä¶ */ });
    console.log('> Deepseek status:', res.status);
    const raw = await res.text();
    console.log('> Deepseek raw response:', raw);
    if (!res.ok || !res.headers.get('content-type')?.includes('application/json')) {
      throw new Error(`Bad response: ${res.status}`);
    }
    const data = JSON.parse(raw);
    const reply = data.choices?.[0]?.message?.content;
    if (reply) {
      await message.channel.send(reply);
    } else {
      console.warn('No reply in Deepseek response', data);
      // –º–æ–∂–Ω–æ –ª–∏–±–æ –º–æ–ª—á–∞ –Ω–∏—á–µ–≥–æ –Ω–µ —à–ª—ë–º, –ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–æ–µ:
      await message.channel.send('–ü—Ä–æ—Å—Ç–∏, –Ω–µ –Ω–∞—à—ë–ª –æ—Ç–≤–µ—Ç–∞.');
    }
  } catch (err) {
    console.error('Deepseek request failed:', err);
    // –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º err –≤ —á–∞—Ç, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º –∏–ª–∏ —à–ª—ë–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    // await message.channel.send('–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.');
  }
});

client.login(process.env.DISCORD_TOKEN);
